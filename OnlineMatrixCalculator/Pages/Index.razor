@page "/"

<PageTitle>Index</PageTitle>

<label for="columns">
    Columns
    <input name="columns" @onchange="ColumnChange" min="0" max="26" value="@columns" title="Columns" type="number">
</label>
<label for="rows">
    Rows
    <input name="rows" @onchange="RowChange" min="0" max="26" value="@rows" title="Rows" type="number">
</label>
<div style="overflow: scroll;" class="container">
    <table style="overflow: scroll;">
        <tr>
            @for (int j = 0; j < columns; j++)
            {
                <th>
                    @letters[j]
                </th>
            }
            <th>
                Sum
            </th>
        </tr>
        @for (int rowIndex = 0; rowIndex < rows; rowIndex++)
        {
            <tr>
                @for (int columnIndex = 0; columnIndex < totalColumns; columnIndex++)
                {
                    int columnArrayIndex = columnIndex;
                    int rowArrayIndex = rowIndex;
                    <td>
                        @*                    Column: @columnArrayIndex<br />
                Row: @rowArrayIndex<br />*@
                        <input style="min-width: 6em;" value="0" type="number" @onchange="(args) => MatrixValue_OnChanged(args, rowArrayIndex, columnArrayIndex)">
                    </td>
                }
            </tr>
        }

        @*@for (int i = 0; i < rows; i++)
        {
        <tr>
        @for (int y = 0; y <= columns; y++)
        {
        int index = i * (columns + 1) + y;
        <td>
        <input type="number" @bind-value="input[index]">
        </td>
        }
        </tr>
        }*@
    </table>
</div>

<h4>Results:</h4>

@if(result.Count() != 0)
{
    for (int x = 0; x < result.Count(); x++)
    {
        <p style="font-size: large;">@(letters[x] + ": " + result[x])</p>
    }
}

<span style="font-size: large; color: red;">@errorMsg</span>
<br />
<button @onclick="Button_OnClick">Calculate</button>

@*<h1>@text</h1>
<h1>@("Länge: " + totalColumns)</h1>
<h1>@("Breite: " + rows)</h1>*@

@code 
{
    double[,]? inputValues;

    const int additionalColumns = 1;
    int privateColumns = 2;
    int privateRows = 2;
    int columns 
    {
        get
        {
            return privateColumns;
        }
        set
        {
            if(value < 0)
            {

            }
            else
            {
                if (value > 26)
                {
                    privateColumns = 26;
                    rows = 26;
                }
                else
                {
                    privateColumns = value;
                    rows = value;
                }
            }
        } 
    }
    int rows
    {
        get
        {
            return privateRows;
        }
        set
        {
            if(value < columns)
            {

            }
            else
            {
                if (value > 26)
                {
                    privateRows = 26;
                }
                else
                {
                    privateRows = value;
                }
            }
        }
    }
    int totalColumns 
    { 
        get
        {
            return columns + additionalColumns;
        }
        set
        {
            columns = value - additionalColumns;
        } 
    }

    List<double> result = new List<double>();
    string text = "";
    string errorMsg = "";

    string[] letters = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };

    protected override async Task OnInitializedAsync()
    {
        ChangeArray();
    }

    private void ChangeArray()
    {
        inputValues = new double[rows, totalColumns];


        //input.Clear();
        //for (int i = 0; i < rows * (columns + 1); i++)
        //{
        //    input.Add(0);
        //}
    }

    private void ColumnChange(ChangeEventArgs e)
    {
        columns = Convert.ToInt32(e.Value);
        ChangeArray();
    }

    private void RowChange(ChangeEventArgs e)
    {
        rows = Convert.ToInt32(e.Value);
        ChangeArray();
    }

    private void Button_OnClick()
    {

        List<double> inputsList = new List<double>();
        for(int i = 0; i < rows; i++)
        {
            for (int j = 0; j < totalColumns; j++)
            {
                inputsList.Add(inputValues[i, j]);
            }
        }
        //result = Solution((columns + 1), rows, input);
        text = System.Text.Json.JsonSerializer.Serialize(inputsList);
        //text = System.Text.Json.JsonSerializer.Serialize(input);
        try
        {
            result = Solution(totalColumns, rows, inputsList);
            errorMsg = "";
        }
        catch(Exception e)
        {
            errorMsg = "ERROR";
        }
    }

    private void MatrixValue_OnChanged(ChangeEventArgs e, int columnIndex, int rowIndex)
    {
        inputValues[columnIndex, rowIndex] = Convert.ToDouble(e.Value);
    }

    private static List<double> Solution(int length, int width, List<double> num)
    {
        int cR = 1;
        int sL = 0;
        for (int cS = 0; cS < length - 2; cS++)
        {
            double s = Double.MaxValue;
            for (int gS = 0; gS < width - cR + 1; gS++)
            {
                if ((num[cS + cS * length + gS * length]) != 0 && Math.Abs((num[cS + cS * length + gS * length])) < s)
                {
                    s = num[cS + cS * length + gS * length];
                    sL = cS + gS + 1;
                }
            }
            if (sL != cS + 1)
            {
                List<double> nC1 = new List<double>();
                List<double> nC2 = new List<double>();
                for (int i = 0; i < length; i++) nC1.Add(num[length * cS + i]);
                for (int i = 0; i < length; i++) nC2.Add(num[length * (sL - 1) + i]);
                for (int i = 0; i < length; i++) num[length * (sL - 1) + i] = nC1[i];
                for (int i = 0; i < length; i++) num[length * cS + i] = nC2[i];
            }
            int mL = cR;
            for (int i = 0; i < width - cR; i++)
            {
                if (num[Convert.ToInt32(length) * mL + cR - 1] != 0)
                {
                    List<double> nM1 = new List<double>();
                    List<double> nM2 = new List<double>();
                    double mF1 = num[length * cS + cS];
                    double mF2 = num[length * (cS + i + 1) + cS];
                    for (int j = 0; j < length; j++) nM1.Add(num[length * cS + j] * mF2);
                    for (int j = 0; j < length; j++) nM2.Add(num[length * (cS + i + 1) + j] * mF1);
                    for (int j = 0; j < length; j++) num[length * (cS + i + 1) + j] = nM1[j] - nM2[j];
                }
                mL++;
            }
            cR++;
        }
        List<double> sol = new List<double>();
        for (int j = 0; j < length - 1; j++) sol.Add(0);
        for (int i = 0; i < length - 1; i++)
        {
            sol[Convert.ToInt32(length - i - 2)] = num[Convert.ToInt32((width - i) * length - 1)];
            int j = 0;
            for (j = 0; j < i; j++) sol[Convert.ToInt32(length - i - 2)] = sol[Convert.ToInt32(length - i - 2)] - num[Convert.ToInt32((width - i) * length - 2 - j)] * sol[Convert.ToInt32(length - j - 2)];
            sol[Convert.ToInt32(length - i - 2)] = sol[Convert.ToInt32(length - i - 2)] / num[Convert.ToInt32((width - i) * length - 2 - j)];
        }
        return sol;
    }
}
